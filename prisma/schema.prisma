// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String    @id @default(cuid())
  firstName              String
  lastName               String
  email                  String    @unique
  phone                  String    @unique
  password               String?
  dateOfBirth            DateTime
  emailVerified          DateTime?
  phoneVerified          Boolean   @default(false)
  image                  String?
  language               String    @default("en")
  role                   UserRole  @default(REGULAR)
  credits                Int       @default(0)
  address                String?
  gstin                  String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  lastVerificationEmailSent DateTime?
  accounts               Account[]
  sessions               Session[]
  reports                Report[]
  verificationRequests   VerificationRequest[] @relation("Requester")
  receivedRequests       VerificationRequest[] @relation("Responder")
  transactions           Transaction[]
  notifications          Notification[]
  subUsers               User[]    @relation("AdminToSubUser")
  admin                  User?     @relation("AdminToSubUser", fields: [adminId], references: [id])
  adminId                String?
  emailNotifications     Boolean   @default(true)
  smsNotifications       Boolean   @default(true)
  accessGrantsGiven      AccessGrant[] @relation("AccessGrantUser")
  accessGrantsReceived   AccessGrant[] @relation("AccessGrantGrantedTo")
  feedback               Feedback[]
  phoneVerifications     PhoneVerification[]
  tickets                Ticket[]
  ticketResponses        TicketResponse[]
  contactRequests        ContactRequest[]
  contactResponses       ContactResponse[]
}

model PhoneVerification {
  id        String   @id @default(cuid())
  userId    String
  phone     String
  otp       String
  verified  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([phone])
}

model VerificationRequest {
  id            String    @id @default(cuid())
  requesterId   String
  responderId   String?
  type          String
  status        String    @default("pending")
  link          String    @unique
  email         String
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  requester     User      @relation("Requester", fields: [requesterId], references: [id])
  responder     User?     @relation("Responder", fields: [responderId], references: [id])
  steps         VerificationStep[]
  report        Report?
}

model VerificationStep {
  id            String    @id @default(cuid())
  requestId     String
  name          String
  status        String    @default("pending")
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  request       VerificationRequest @relation(fields: [requestId], references: [id])
}

model Report {
  id                String    @id @default(cuid())
  userId            String
  verificationId    String?   @unique
  purpose           String
  verificationType  String    // Added this field
  documentType      String
  documentNumber    String
  personPhoto      String
  documentImage    String
  status           String    @default("pending")
  paymentStatus    String    @default("pending")  // Added this field
  result           Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id])
  verification     VerificationRequest? @relation(fields: [verificationId], references: [id])
  aadhaarOtp      String?   // Added this field
  aadhaarOtpExpiry DateTime? // Added this field
}


model Transaction {
  id        String   @id @default(cuid())
  userId    String
  type      String
  amount    Float
  credits   Int
  status    String
  paymentId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  status    String   @default("unread")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Coupon {
  id          String   @id @default(cuid())
  code        String   @unique
  discount    Float
  minAmount   Float
  maxDiscount Float
  validFrom   DateTime
  validUntil  DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AccessGrant {
  id          String   @id @default(cuid())
  userId      String
  grantedToId String
  type        String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("AccessGrantUser", fields: [userId], references: [id])
  grantedTo   User     @relation("AccessGrantGrantedTo", fields: [grantedToId], references: [id])

  @@unique([userId, grantedToId])
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String?
  content   String
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Ticket {
  id          String   @id @default(cuid())
  userId      String
  subject     String
  description String   @db.Text
  status      TicketStatus @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  responses   TicketResponse[]
}

model TicketResponse {
  id          String   @id @default(cuid())
  ticketId    String
  userId      String
  message     String   @db.Text
  createdAt   DateTime @default(now())
  ticket      Ticket   @relation(fields: [ticketId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model ContactRequest {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String?
  message     String   @db.Text
  status      ContactStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  responses   ContactResponse[]
}

model ContactResponse {
  id              String   @id @default(cuid())
  contactRequestId String
  userId          String
  message         String   @db.Text
  createdAt       DateTime @default(now())
  contactRequest  ContactRequest @relation(fields: [contactRequestId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model VerificationPrice {
  id                  String   @id @default(cuid())
  type                String   @unique
  basePrice           Float
  userSpecificPrices  Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

enum UserRole {
  REGULAR
  ADMIN
  PRIVILEGED
  OWNER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

enum ContactStatus {
  PENDING
  RESPONDED
}