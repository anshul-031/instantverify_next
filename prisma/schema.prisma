// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  firstName         String
  lastName          String
  email             String    @unique
  phone             String    @unique
  password          String?
  dateOfBirth       DateTime
  emailVerified     DateTime?
  phoneVerified     Boolean   @default(false)
  image             String?
  language          String    @default("en")
  role              UserRole  @default(REGULAR)
  credits           Int       @default(0)
  address           String?
  gstin             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accounts          Account[]
  sessions          Session[]
  reports           Report[]
  verificationRequests VerificationRequest[] @relation("Requester")
  receivedRequests  VerificationRequest[]    @relation("Responder")
  transactions      Transaction[]
  notifications     Notification[]
  subUsers          User[]    @relation("AdminToSubUser")
  admin             User?     @relation("AdminToSubUser", fields: [adminId], references: [id])
  adminId           String?
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(true)
}

model VerificationRequest {
  id            String    @id @default(cuid())
  requesterId   String
  responderId   String?
  type          String
  status        String    @default("pending")
  link          String    @unique
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  requester     User      @relation("Requester", fields: [requesterId], references: [id])
  responder     User?     @relation("Responder", fields: [responderId], references: [id])
  steps         VerificationStep[]
  report        Report?
}

model VerificationStep {
  id            String    @id @default(cuid())
  requestId     String
  name          String
  status        String    @default("pending")
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  request       VerificationRequest @relation(fields: [requestId], references: [id])
}

model Report {
  id              String    @id @default(cuid())
  userId          String
  verificationId  String?   @unique
  purpose         String
  documentType    String
  documentNumber  String
  personPhoto     String
  documentImage   String
  status          String    @default("pending")
  result          Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
  verification    VerificationRequest? @relation(fields: [verificationId], references: [id])
}

model Transaction {
  id        String   @id @default(cuid())
  userId    String
  type      String
  amount    Float
  credits   Int
  status    String
  paymentId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  status    String   @default("unread")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Coupon {
  id          String   @id @default(cuid())
  code        String   @unique
  discount    Float
  minAmount   Float
  maxDiscount Float
  validFrom   DateTime
  validUntil  DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AccessGrant {
  id          String   @id @default(cuid())
  userId      String
  grantedToId String
  type        String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("AccessGrantUser", fields: [userId], references: [id])
  grantedTo   User     @relation("AccessGrantGrantedTo", fields: [grantedToId], references: [id])

  @@unique([userId, grantedToId])
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String?
  content   String
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

enum UserRole {
  REGULAR
  ADMIN
  PRIVILEGED
  OWNER
}